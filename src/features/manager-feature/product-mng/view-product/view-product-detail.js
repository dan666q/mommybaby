import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/* eslint-disable @typescript-eslint/no-explicit-any */
import { useState } from 'react';
import { Card, Descriptions, Image, Button, Modal, Input, InputNumber, Select, Switch } from 'antd';
import { EditOutlined } from '@ant-design/icons';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { productSchema } from '@/lib/zod/schema';
import { useParams } from 'react-router-dom';
import { useViewProductDetail } from './use-view-product-detail';
import { useViewBrandList } from '../../brand-mng/view-brand/use-view-brand-list';
import { useEditProduct } from '../edit-product/use-edit-product';
const { Option } = Select;
export default function ViewProductDetail() {
    const { productId } = useParams();
    const { data: product } = useViewProductDetail(Number(productId));
    const { data: brandList } = useViewBrandList();
    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
    const editProductMutation = useEditProduct(productId);
    const { control, handleSubmit, reset, formState: { errors }, } = useForm({
        resolver: zodResolver(productSchema),
        defaultValues: product,
    });
    const showEditModal = () => {
        reset(product);
        setIsEditModalVisible(true);
    };
    const handleEditOk = handleSubmit((data) => {
        editProductMutation.mutate(data);
        setIsEditModalVisible(false);
    });
    const handleEditCancel = () => {
        setIsEditModalVisible(false);
    };
    const formatNumber = (number) => {
        return new Intl.NumberFormat('vi-VN').format(number);
    };
    return (_jsxs("div", { className: "px-10 py-5", children: [_jsx(Card, { title: _jsx("h1", { className: "text-2xl font-bold", children: product?.productName }), extra: _jsx("div", { className: "space-x-2", children: _jsx(Button, { type: "primary", icon: _jsx(EditOutlined, {}), onClick: showEditModal, children: "Edit" }) }), className: "shadow-lg", children: _jsxs("div", { className: "flex flex-col md:flex-row", children: [_jsx("div", { className: "w-full md:w-1/3 pr-4", children: _jsx(Image, { src: product?.productImg, alt: product?.productName, className: "w-full rounded-lg" }) }), _jsx("div", { className: "w-full md:w-2/3", children: _jsxs(Descriptions, { bordered: true, column: 2, children: [_jsx(Descriptions.Item, { label: "Product ID", children: product?.productId }), _jsx(Descriptions.Item, { label: "Product Name", children: product?.productName }), _jsx(Descriptions.Item, { label: "Brand", children: product?.productBrand }), _jsxs(Descriptions.Item, { label: "Price", children: [formatNumber(product?.productPrice), " VND"] }), _jsxs(Descriptions.Item, { label: "Discount", children: [product?.discount, "%"] }), _jsx(Descriptions.Item, { label: "Stock", children: product?.quantity }), _jsx(Descriptions.Item, { label: "By Age", children: product?.byAge }), _jsx(Descriptions.Item, { label: "Pre-Order", children: product?.isPreOrder ? 'Yes' : 'No' }), _jsx(Descriptions.Item, { label: "Pre-Order Amount", children: product?.preOrderAmount || 'N/A' }), _jsx(Descriptions.Item, { label: "Promoted", children: product?.isPromote ? 'Yes' : 'No' }), _jsx(Descriptions.Item, { label: "Disabled", children: product?.isDisable ? 'Yes' : 'No' }), _jsx(Descriptions.Item, { label: "Rate", children: product?.rate }), _jsx(Descriptions.Item, { label: "Description", children: product?.productDescription })] }) })] }) }), _jsx(Modal, { title: "Edit Product", visible: isEditModalVisible, onOk: handleEditOk, onCancel: handleEditCancel, width: 700, children: _jsxs("form", { onSubmit: handleEditOk, className: "space-y-4", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Product Name" }), _jsx(Controller, { name: "productName", control: control, render: ({ field }) => _jsx(Input, { ...field, className: "mt-1" }) }), errors.productName && _jsx("p", { className: "mt-1 text-sm text-red-600", children: errors.productName.message })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Brand" }), _jsx(Controller, { name: "brandId", control: control, render: ({ field }) => (_jsx(Select, { ...field, className: "mt-1 w-full", children: brandList?.map((brand) => (_jsx(Option, { value: brand.brandId, children: brand.brandName }, brand.brandId))) })) }), errors.brandId && _jsx("p", { className: "mt-1 text-sm text-red-600", children: errors.brandId.message })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Price" }), _jsx(Controller, { name: "productPrice", control: control, render: ({ field }) => _jsx(InputNumber, { ...field, className: "mt-1 w-full", prefix: "VND" }) }), errors.productPrice && _jsx("p", { className: "mt-1 text-sm text-red-600", children: errors.productPrice.message })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Discount" }), _jsx(Controller, { name: "discount", control: control, render: ({ field }) => _jsx(InputNumber, { ...field, className: "mt-1 w-full" }) }), errors.discount && _jsx("p", { className: "mt-1 text-sm text-red-600", children: errors.discount.message })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Stock" }), _jsx(Controller, { name: "quantity", control: control, render: ({ field }) => _jsx(InputNumber, { ...field, className: "mt-1 w-full" }) }), errors.quantity && _jsx("p", { className: "mt-1 text-sm text-red-600", children: errors.quantity.message })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700", children: "By Age" }), _jsx(Controller, { name: "byAge", control: control, render: ({ field }) => _jsx(InputNumber, { ...field, className: "mt-1 w-full" }) }), errors.byAge && _jsx("p", { className: "mt-1 text-sm text-red-600", children: errors.byAge.message })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Pre-Order" }), _jsx(Controller, { name: "isPreOrder", control: control, render: ({ field }) => _jsx(Switch, { ...field, checked: field.value }) })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Pre-Order Amount" }), _jsx(Controller, { name: "preOrderAmount", control: control, render: ({ field }) => _jsx(InputNumber, { ...field, className: "mt-1 w-full" }) })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Promoted" }), _jsx(Controller, { name: "isPromote", control: control, render: ({ field }) => _jsx(Switch, { ...field, checked: field.value }) })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Disabled" }), _jsx(Controller, { name: "isDisable", control: control, render: ({ field }) => _jsx(Switch, { ...field, checked: field.value }) })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Product image" }), _jsx(Controller, { name: "productImg", control: control, render: ({ field }) => _jsx(Input, { ...field, className: "mt-1" }) }), errors.productImg && _jsx("p", { className: "mt-1 text-sm text-red-600", children: errors.productImg.message })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Description" }), _jsx(Controller, { name: "productDescription", control: control, render: ({ field }) => _jsx(Input.TextArea, { ...field, rows: 4, className: "mt-1" }) }), errors.productDescription && (_jsx("p", { className: "mt-1 text-sm text-red-600", children: errors.productDescription.message }))] })] }) })] }));
}
